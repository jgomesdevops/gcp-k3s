name: Deploy Infrastructure to GCP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
        - apply

env:
  TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
  TF_VAR_gcp_region: ${{ vars.GCP_REGION }}
  TF_VAR_gcp_zone: ${{ vars.GCP_ZONE }}

jobs:
  # Terraform Plan (runs on push and PR)
  terraform-plan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        token_format: 'id_token'
        id_token_audience: 'https://token.actions.githubusercontent.com'
        workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider'
        service_account: 'github-actions-ci@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate

    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -no-color -out=tfplan

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/tfplan

  # Terraform Apply (manual trigger only, requires environment approval)
  terraform-apply:
    needs: terraform-plan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        token_format: 'id_token'
        id_token_audience: 'https://token.actions.githubusercontent.com'
        workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider'
        service_account: 'github-actions-ci@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: terraform/

    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve tfplan

  # Build and Push Docker Image (after infrastructure is deployed)
  build-and-push-image:
    needs: terraform-apply
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        token_format: 'id_token'
        id_token_audience: 'https://token.actions.githubusercontent.com'
        workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider'
        service_account: 'github-actions-ci@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev

    - name: Build Docker Image
      run: |
        cd node-app-http-docker
        docker build -t ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/node-app-repo/node-app:latest .
        docker build -t ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/node-app-repo/node-app:${{ github.sha }} .

    - name: Push Docker Image
      run: |
        docker push ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/node-app-repo/node-app:latest
        docker push ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/node-app-repo/node-app:${{ github.sha }}

  # Deploy to K3s Cluster
  deploy-to-k3s:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        token_format: 'id_token'
        id_token_audience: 'https://token.actions.githubusercontent.com'
        workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider'
        service_account: 'github-actions-ci@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Get K3s Cluster Credentials
      run: |
        # Get the VM instance details
        VM_NAME=$(gcloud compute instances list --filter="name~this" --format="value(name)" --limit=1)
        ZONE=$(gcloud compute instances list --filter="name~this" --format="value(zone)" --limit=1)
        
        # Copy kubeconfig from the VM
        gcloud compute scp $VM_NAME:/etc/rancher/k3s/k3s.yaml ./k3s-config --zone=$ZONE
        
        # Update the kubeconfig to use the VM's external IP
        VM_IP=$(gcloud compute instances describe $VM_NAME --zone=$ZONE --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
        sed -i "s/127.0.0.1/$VM_IP/g" ./k3s-config
        
        # Set KUBECONFIG environment variable
        export KUBECONFIG=./k3s-config
        
        # Verify connection to K3s cluster
        kubectl cluster-info
        kubectl get nodes

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Deploy Helm Chart with Dynamic Image Tag
      run: |
        # Use the kubeconfig we copied from the VM
        export KUBECONFIG=./k3s-config
        
        helm upgrade --install k3s-app ./helm/k3s-app \
          --namespace node-app \
          --create-namespace \
          --set app.imageTagOverride=${{ github.sha }} \
          --set app.image.repository=${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/node-app-repo/node-app \
          --wait --timeout=5m